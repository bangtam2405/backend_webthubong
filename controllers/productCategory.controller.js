const ProductCategory = require('../models/ProductCategory');
const Products = require('../models/Products');

// L·∫•y t·∫•t c·∫£ danh m·ª•c s·∫£n ph·∫©m
exports.getAllProductCategories = async (req, res) => {
  try {
    const categories = await ProductCategory.find()
      .sort({ sortOrder: 1, createdAt: -1 });
    
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m cho m·ªói danh m·ª•c
    const categoriesWithCount = await Promise.all(
      categories.map(async (category) => {
        const productCount = await Products.countDocuments({ type: category.type });
        return {
          ...category.toObject(),
          productCount
        };
      })
    );

    res.status(200).json(categoriesWithCount);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh m·ª•c s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y danh m·ª•c s·∫£n ph·∫©m theo ID
exports.getProductCategoryById = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await ProductCategory.findById(id);
    
    if (!category) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m' });
    }

    // ƒê·∫øm s·ªë s·∫£n ph·∫©m trong danh m·ª•c
    const productCount = await Products.countDocuments({ type: category.type });
    const categoryWithCount = {
      ...category.toObject(),
      productCount
    };

    res.status(200).json(categoryWithCount);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh m·ª•c s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// T·∫°o danh m·ª•c s·∫£n ph·∫©m m·ªõi
exports.createProductCategory = async (req, res) => {
  try {
    const { name, type, description, image, icon, color, isActive, sortOrder } = req.body;

    // Ki·ªÉm tra t√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingCategory = await ProductCategory.findOne({ name: name.trim() });
    if (existingCategory) {
      return res.status(400).json({ message: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i' });
    }

    const newCategory = new ProductCategory({
      name: name.trim(),
      type,
      description: description?.trim(),
      image,
      icon: icon || 'üì¶',
      color: color || '#FF6B9D',
      isActive: isActive !== undefined ? isActive : true,
      sortOrder: sortOrder || 0
    });

    await newCategory.save();
    res.status(201).json({ 
      message: 'T·∫°o danh m·ª•c s·∫£n ph·∫©m th√†nh c√¥ng', 
      category: newCategory 
    });
  } catch (error) {
    console.error('L·ªói khi t·∫°o danh m·ª•c s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// C·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m
exports.updateProductCategory = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, type, description, image, icon, color, isActive, sortOrder } = req.body;

    // Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    const existingCategory = await ProductCategory.findById(id);
    if (!existingCategory) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m' });
    }

    // Ki·ªÉm tra t√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i ch∆∞a (tr·ª´ ch√≠nh n√≥)
    if (name && name.trim() !== existingCategory.name) {
      const duplicateName = await ProductCategory.findOne({ 
        name: name.trim(), 
        _id: { $ne: id } 
      });
      if (duplicateName) {
        return res.status(400).json({ message: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i' });
      }
    }

    const updateData = {
      name: name?.trim(),
      type,
      description: description?.trim(),
      image,
      icon,
      color,
      isActive,
      sortOrder
    };

    // Lo·∫°i b·ªè c√°c tr∆∞·ªùng undefined
    Object.keys(updateData).forEach(key => 
      updateData[key] === undefined && delete updateData[key]
    );

    const updatedCategory = await ProductCategory.findByIdAndUpdate(
      id, 
      updateData, 
      { new: true, runValidators: true }
    );

    res.status(200).json({ 
      message: 'C·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m th√†nh c√¥ng', 
      category: updatedCategory 
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// X√≥a danh m·ª•c s·∫£n ph·∫©m
exports.deleteProductCategory = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    const category = await ProductCategory.findById(id);
    if (!category) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m' });
    }

    // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c kh√¥ng
    const productCount = await Products.countDocuments({ type: category.type });
    if (productCount > 0) {
      return res.status(400).json({ 
        message: `Kh√¥ng th·ªÉ x√≥a danh m·ª•c. C√≥ ${productCount} s·∫£n ph·∫©m ƒëang s·ª≠ d·ª•ng danh m·ª•c n√†y.` 
      });
    }

    await ProductCategory.findByIdAndDelete(id);
    res.status(200).json({ message: 'X√≥a danh m·ª•c s·∫£n ph·∫©m th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói khi x√≥a danh m·ª•c s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y danh m·ª•c s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông (cho frontend)
exports.getActiveProductCategories = async (req, res) => {
  try {
    const categories = await ProductCategory.find({ isActive: true })
      .sort({ sortOrder: 1, createdAt: -1 })
      .select('name type description image icon color');
    
    res.status(200).json(categories);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh m·ª•c s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// C·∫≠p nh·∫≠t th·ª© t·ª± danh m·ª•c
exports.updateCategoryOrder = async (req, res) => {
  try {
    const { categories } = req.body; // Array of { id, sortOrder }
    
    if (!Array.isArray(categories)) {
      return res.status(400).json({ message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' });
    }

    // C·∫≠p nh·∫≠t th·ª© t·ª± cho t·ª´ng danh m·ª•c
    await Promise.all(
      categories.map(async ({ id, sortOrder }) => {
        await ProductCategory.findByIdAndUpdate(id, { sortOrder });
      })
    );

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t th·ª© t·ª± danh m·ª•c th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th·ª© t·ª± danh m·ª•c:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};