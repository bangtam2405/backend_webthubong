const express = require('express');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const router = express.Router();

const GEMINI_API_KEY = "AIzaSyCWK0yOFsA3o1lQAcZNehJCKh_Z9BsMl4M";
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

// Import model Products
const Products = require('../models/Products');

router.post('/', async (req, res) => {
  try {
    const { message } = req.body;
    // X·ª≠ l√Ω intent ƒë·∫∑c bi·ªát: b√°n ch·∫°y nh·∫•t, ƒë√°nh gi√° cao nh·∫•t
    const lowerMsg = message.toLowerCase();
    if (lowerMsg.includes('b√°n ch·∫°y nh·∫•t')) {
      // L·∫•y s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
      const best = await Products.findOne().sort({ sold: -1 }).limit(1);
      if (best) {
        return res.json({
          message: `S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t hi·ªán t·∫°i l√†: <b>${best.name}</b>\n\n${best.description ? best.description.substring(0, 120) + (best.description.length > 120 ? '...' : '') : ''}\nGi√°: ${best.price.toLocaleString('vi-VN')}‚Ç´\nƒê√£ b√°n: ${best.sold || 0} l∆∞·ª£t\n\nüëâ <a href="/product/${best._id}">Xem chi ti·∫øt s·∫£n ph·∫©m</a>`,
          product: {
            _id: best._id,
            name: best.name,
            image: best.image,
            price: best.price,
            sold: best.sold,
            rating: best.rating
          }
        });
      }
    }
    if (lowerMsg.includes('ƒë√°nh gi√° cao nh·∫•t') || lowerMsg.includes('ƒë∆∞·ª£c ƒë√°nh gi√° cao')) {
      // L·∫•y s·∫£n ph·∫©m ƒë√°nh gi√° cao nh·∫•t
      const top = await Products.findOne().sort({ rating: -1, reviews: -1 }).limit(1);
      if (top) {
        return res.json({
          message: `S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t l√†: <b>${top.name}</b>\n\n${top.description ? top.description.substring(0, 120) + (top.description.length > 120 ? '...' : '') : ''}\nGi√°: ${top.price.toLocaleString('vi-VN')}‚Ç´\nƒê√°nh gi√°: ${top.rating || 0}‚≠ê (${top.reviews || 0} l∆∞·ª£t)\n\nüëâ <a href="/product/${top._id}">Xem chi ti·∫øt s·∫£n ph·∫©m</a>`,
          product: {
            _id: top._id,
            name: top.name,
            image: top.image,
            price: top.price,
            sold: top.sold,
            rating: top.rating
          }
        });
      }
    }
    // L·∫•y top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
    const products = await Products.find().sort({ sold: -1 }).limit(10);
    // T·ªïng h·ª£p th√¥ng tin s·∫£n ph·∫©m
    const productInfo = products.map(p =>
      `- ${p.name}: ${p.description ? p.description.substring(0, 60) + (p.description.length > 60 ? '...' : '') : ""} Gi√°: ${p.price}ƒë. ƒê√£ b√°n: ${p.sold || 0} l∆∞·ª£t. ƒê√°nh gi√°: ${p.rating || "ch∆∞a c√≥"}`
    ).join('\n');
    // ƒê·ªçc th√™m th√¥ng tin website c·ªë ƒë·ªãnh
    const infoPath = path.join(__dirname, '../../lib/website_info.txt');
    const websiteInfo = fs.readFileSync(infoPath, 'utf-8');
    // T·∫°o prompt
    const prompt = `\nB·∫°n l√† tr·ª£ l√Ω AI c·ªßa website th√∫ b√¥ng. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin v·ªÅ website:\n${websiteInfo}\n\nD∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m n·ªïi b·∫≠t:\n${productInfo}\n\nNg∆∞·ªùi d√πng h·ªèi: "${message}"\nH√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c, th√¢n thi·ªán, d·ª±a tr√™n th√¥ng tin website v√† s·∫£n ph·∫©m ·ªü tr√™n.`;
    // G·ªçi Gemini API
    const response = await axios.post(
      GEMINI_API_URL,
      {
        contents: [
          {
            parts: [{ text: prompt }]
          }
        ]
      },
      {
        headers: {
          "Content-Type": "application/json",
          "X-goog-api-key": GEMINI_API_KEY
        }
      }
    );
    const aiMessage = response.data.candidates?.[0]?.content?.parts?.[0]?.text || "Xin l·ªói, t√¥i ch∆∞a c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y.";
    res.json({ message: aiMessage });
  } catch (error) {
    console.error(error?.response?.data || error);
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi g·ªçi AI." });
  }
});

module.exports = router; 